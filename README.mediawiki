'''Name:''' Actual Storage

'''Version:''' 0.2.0

'''Creator:''' Bryce Campbell

'''License:''' See LICENSE

'''Description:''' Port of mobile app to CLI environment that can tell the user how much storage is usable on a secondary storage medium (e.g. HDD/SSD, USBs, and Optical media).

==Notes==

The calculations are most accurate for external devices and will not take filesystem into, due to the formula used to make these calculations.

===Version History===

<dl>
<dt style="font-weight:bold">0.2</dt>
<dd>
<ul>
<li>Migrate to Swift Package Manager, now that Resources are natively supported.</li>
<li>Use Apple&#39;s <a href="https://github.com/apple/swift-argument-parser">Argument Parser</a> to make CLI stuff easier.</p>
<li>Remove unneeded struct and minimizing JSON.</p>
</ul>
<p><span style="font-weight: bold">Posted:</span> <aabr title="October">Oct.</abbr> 16, 2020</p>
</dd>
<dt style="font-weight:bold">0.1</dt>
<dd>
Initial release
</dd>
</dl>

===Questions===

<ol>
<li>
<dl>
<dt>'''What is so different about this port, aside from the language used to create it?'''</dt>
<dd><p>The program has been coded so that it can be compiled on just about any operating system that supports Apple's Swift, so as Swift become more widespread, it <strong>should</strong> not need to be rewritten. However, the biggest different is how the calculations are performed.</p>
<p>In previous iterations, I coded thing in a way that I would need to update the code to have new functions/methods if units of measure greater than Yottabytes come into existence, which would become tedious after a while.</p>
<p>However, this version of the program makes use of a JSON file to house the various units and there is only one function, which does calculations based on index of each unit in the array in the JSON file, thereby allowing scalability in the future, without needing to bother with the code.
<p>
</dd>
</dl>
</li>
<li>
<dl>
<dt>'''Do you plan to provide a GUI?'''</dt>
<dd><p>While I would like to have one for this program, it will be a very long time before I am even tempted.</p> 
<p>Right now, I can dig up info on providing an X11 interface, which will work on Macs and Ubuntu, but I would like to have one GUI for all platforms, and that is not possible with Swift at this time.</p>
<p>If things change, I might look into things further, but chances are greater that I will update my iOS code with the use of JSON rather than hard coding.</p>
</dd>
</dl>
</li>
</ol>

===Installation===

To install the application, download the zip or clone this repository.

In the cloned directory, issue the following command as root/superuser:

<pre>
make install
</pre>

<p>The binary will be installed in /usr/local/bin and the resources folder will be in the same directory.</p>

<p>To ensure things go smoothly, make sure you have rsync installed on your system.</p>

===Uninstallation===

To uninstall the binary and remove its resources, if installed via source, run the following as root/superuser:

<pre>
make uninstall
</pre>

===Usage===

To use the program, call it and tell it the known storage capacity like this:

<pre>
actual 250 GB
</pre>

Units are case insensitive, so <strong>gb</strong> will also work. This was does because the program cannot handle any storage capacities below the Kilobyte range, due to the code used to allow scalability, and will never support hectobytes or smaller.

===Adding Units===

If you what to cover units larger than Yottabytes, the desired unit of measure can be added into the <strong>units.json</strong> in the resources directory, which is <strong>actual_actual.resources</strong> on Ubuntu.

<strong>Make sure any additional units after YottaByte and Use the 2-letter abbreviation.</p>

===Support===

As this program can be edited by anyone, it should not need support, but if things are not working right, I will try to help as much as I can, if you submit an issue on Github or email me at the address found on the site below.

http://brycecampbell.me
