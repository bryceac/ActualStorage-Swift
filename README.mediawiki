'''Name:''' Actual Storage

'''Version:''' 0.1

'''Creator:''' Bryce Campbell

'''License:''' See LICENSE

'''Description:''' Port of mobile app to CLI environment that can tell the user how much storage is usable on a secondary storage medium (e.g. HDD/SSD, USBs, and Optical media).

==Notes==

The calculations are most accurate for external devices and will not take filesystem into, due to the formula used to make these calculations.

===Questions===

<ol>
<li>
<dl>
<dt>'''What is so different about this port, aside from the language used to create it?'''</dt>
<dd><p>The program has been coded so that it can be compiled on just about any operating system that supports Apple's Swift, so as Swift become more widespread, it <strong>should</strong> not need to be rewritten. However, the biggest different is how the calculations are performed.</p>
<p>In previous iterations, I coded thing in a way that I would need to update the code to have new functions/methods if units of measure greater than Yottabytes come into existence, which would become tedious after a while.</p>
<p>However, this version of the program makes use of a JSON file to house the various units and there is only function, which does calculations based on index of each unit in the array in the JSON file, thereby allowing scalability in the future, without needing to bother with the code.
<p></dd>
</dl>
</li>
<li>
<dl>
<dt>'''Do you plan to provide a GUI?'''</dt>
<dd><p>While I would like to have one for this program, it will be a very long time before I am even tempted.</p> 
<p>Right now, I can dig up info on providing an X11 interface, which will work on Macs and Ubuntu, but I would like to have one GUI for all platforms, and that is not possible with Swift at this time.</p>
<p>If things change, I might look into things further, but chances are greater that I will update my iOS code with the use of JSON rather than hard coding.</p>
</dd>
</dl>
</li>
</ol>

===Running===

Due to the use of local JSON, which prevent me from using things that make life easier (e.g. Swift Package Manager), it is highly unlikely that this program can be run without compilation.

To compile, run the follow in the folder after extracting the zip or cloning the repo:

<pre>
make
</pre>

This will produce an executable called <strong>actual</strong> that will run on your system, and can be run via

<pre>
./actual
<pre>

in the folder.

If you move the executable, make sure you keep the JSON file with it, as things work best if they are in the same folder.

====Options====

When running the program, you will be greeted with a prompt that asks for storage capacity and should not include any units (e.g. KB, MB, or GB), as you can only enter numerical input into the program and you can specify unit later.

If you do not want go through this interactive mode and/or want to provide everything upfront, the following patterns should work:

<pre>
./actual (storage capacity) (unit)
</pre>

either single character or two letter abbreviation will work for units, and case should not matter.

<pre>
./actual (storage capacity)(unit)
</pre>

Same as above, and was implemented in case one forgets to add in a space.

Two letter abbreviation is the max length and storage capacity <strong>must</strong> be a numerical value.

Any more than two letter will cause problems with program logic, and I do not plan to allow full wording of each unit, though it is possible to add it in.

Do not include parenthesis that are seen in patterns, as they are only used to help demonstrate the pattern better and will not work.

===Support===

As this program can be edited by anyone, it should not need support, but if things are not working right, I will try to help as much as I can, if you submit an issue on Github or email me at the address found on the site below.

http://brycecampbell.me
